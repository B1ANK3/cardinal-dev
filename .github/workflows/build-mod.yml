name: Build

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

# TODO: make env variables up top

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-20.04
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}

    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/checkout@v3

      - name: get version
        run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

      - name: create release
        id: create-release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.TARGET_ACCESS_TOKEN }}
          script: |
            let tag_name = `cardinal-v${process.env.PACKAGE_VERSION}`;
            let release_name = `Cardinal v${process.env.PACKAGE_VERSION}`;

            const { data } = await github.rest.repos.createRelease({
              owner: "B1ANK3",
              repo: "cardinal-releases",
              tag_name,
              name: release_name,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false 
            })

            return data.id

  build:
    name: Build Tauri Applications
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v3
      - name: setup node
        uses: actions/setup-node@v3

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install app dependencies and build it
        run: yarn && yarn build

      # Revisit this branch to when it becomes stable
      - uses: B1ANK3/tauri-action@dev
        id: tauri-build
        env:
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          github-token: ${{ secrets.TARGET_ACCESS_TOKEN }}
          releaseId: ${{ needs.create-release.outputs.release_id }}

  release:
    runs-on: ubuntu-20.04
    needs: [create-release, build]
    if: ${{ needs.create-release.result == 'success' && needs.build.result == 'success' }}

    steps:
      - name: check release id
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        run: echo $release_id

      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          github-token: ${{ secrets.TARGET_ACCESS_TOKEN }}
          # https://octokit.github.io/rest.js/v19#repos-update-release
          script: |
            github.rest.repos.updateRelease({
              owner: "B1ANK3",
              repo: "cardinal-releases",
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
